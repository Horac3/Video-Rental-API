
# Generated by CodiumAI

# Dependencies:
# pip install pytest-mock
import pytest

class TestAvailableFilms:

    # correctly identifies films that have been rented and returned
    def test_correctly_identifies_rented_and_returned_films(self, mocker):
        mock_session = mocker.patch('app.session')
        mock_query = mocker.Mock()
        mock_session.query.return_value = mock_query

        rented_and_returned_films = [
            (1, 101, 'Film A'),
            (2, 102, 'Film B')
        ]
        never_rented_films = []

        mock_query.join.return_value = mock_query
        mock_query.filter.return_value = rented_and_returned_films
        mock_query.outerjoin.return_value = mock_query
        mock_query.filter.return_value = never_rented_films

        mock_session.execute.return_value.fetchall.return_value = rented_and_returned_films + never_rented_films

        available_films()

        assert mock_session.query.called
        assert mock_session.execute.called
        assert len(rented_and_returned_films) == 2

    # no films in the database
    def test_no_films_in_database(self, mocker):
        mock_session = mocker.patch('app.session')
        mock_query = mocker.Mock()
        mock_session.query.return_value = mock_query

        rented_and_returned_films = []
        never_rented_films = []

        mock_query.join.return_value = mock_query
        mock_query.filter.return_value = rented_and_returned_films
        mock_query.outerjoin.return_value = mock_query
        mock_query.filter.return_value = never_rented_films

        mock_session.execute.return_value.fetchall.return_value = rented_and_returned_films + never_rented_films

        available_films()

        assert mock_session.query.called
        assert mock_session.execute.called
        assert len(rented_and_returned_films) == 0